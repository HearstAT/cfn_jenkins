---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Xenial (20161214 AMI Build) - Jenkins Master and Docker Build Server"

Parameters:
###############################################################################
# Domain Configuration
###############################################################################
  HostedZone:
    Type: String
    Default: domain.com
    Description: must match a route53 hosted domain/zone

  SSLCertificateARN:
    Type: String
    Default: ''
    Description: SSL Certficate ARN for SSL Certficate

###############################################################################
# Redeploy/Existing Install Configuration
###############################################################################
  ExistingBucketName:
    Type: String
    Default: ''
    Description: Enter a Existing Bucket Name to to use (Leave blank to create new)

###############################################################################
# Jenkins Configuration
###############################################################################
  JenkinsSubdomain:
    Type: String
    Default: jenkins-test
    AllowedValues:
      - jenkins-a
      - jenkins-b
      - jenkins-test
    Description: subdomain/prefix that is combined with the hosted zone entered

  JenkinsVersion:
    Type: String
    Default: "2.32.1"
    AllowedValues:
      - "2.32.1"
      - "2.19.4"
      - "2.19.3"
      - "2.19.2"
      - "2.19.1"
      - "2.7.4"
      - "2.7.3"
      - "2.7.2"
      - "2.7.1"
    Description: Choose Jenkins Version to Install

  AdminUsername:
    Type: String
    Default: ''
    Description: Enter Username for Jenkins Local Admin

  AdminPassword:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: Enter Password for Jenkins Admin

  JenkinsLogLevel:
    Type: String
    Default: "INFO"
    AllowedValues:
      - "SEVERE"
      - "WARNING"
      - "INFO"
      - "CONFIG"
      - "FINE"
      - "FINER"
      - "FINEST"
      - "ALL"
    Description: Choose log level for Jenkins Master

  MasterInstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.

###############################################################################
# Plugins Configuration
###############################################################################
  GithubEmail:
    Type: String
    Default: ''
    Description: Enter Github Commit Email

  GithubOrg:
    Type: String
    Default: ''
    Description: Enter Github Organization (Auth Org)

  GithubAdmins:
    Type: String
    Default: ''
    Description: Enter Github Users that will be Jenkins Admins

  GithubClientID:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: Enter Github oauth ClientID

  GithubClientSecret:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: Enter Github oauth ClientSecret

  SlackTeam:
    Type: String
    Default: ''
    Description: Enter Slack Team

  SlackRoom:
    Type: String
    Default: ''
    Description: Enter Default Slack Room/Channel for Job Post (ID Recommended)

  SlackToken:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: Enter Slack Token

###############################################################################
# Jenkins Build Configuration
###############################################################################
  DockerVersion:
    Type: String
    Default: "1.12.5"
    AllowedValues:
      - "1.12.5"
      - "1.12.4"
      - "1.12.3"
      - "1.12.2"
      - "1.12.1"
      - "1.12.0"
      - "1.11.2"
      - "1.11.1"
      - "1.11.0"
    Description: Choose Docker Version to Install

  BuildInstanceType:
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.

###############################################################################
# Instance and Network Configuration
###############################################################################
  VPC:
    Description: Choose VPC to use
    Type: AWS::EC2::VPC::Id
    Default: ''

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  SSHSecurityGroup:
    Description: Select Security Group for SSH Access
    Type: AWS::EC2::SecurityGroup::Id
    Default: ''

  CIDRA:
    Type: String
    Default: 172.33.40.0/24
    Description: Subnet A CIDR Block

###############################################################################
# Sumologic Configuration
###############################################################################
  SumologicAccessID:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: (Optional) Enter Sumologic Access ID

  SumologicAccessKey:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: (Optional) Enter Sumologic Access Key

###############################################################################
# New Relic Configuration
###############################################################################
  NewRelicAppName:
    Type: String
    Default: ''
    Description: (Optional) Enter New Relic Application Name; e.g.; jenkins_stack

  NewRelicLicense:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: (Optional) Enter New Relic License Key

###############################################################################
# Development Configuration
###############################################################################
  GitClone:
    Description: Enter Git Clone URL for Scripts
    Type: String
    Default: 'https://github.com/HearstAT/cfn_jenkins.git'
  GitBranch:
    Description: Enter Branch to Pull Scripts From (For Testing Only Leave Default for Prod)
    Type: String
    Default: 'master'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: Domain Configuration
      Parameters:
        - HostedZone
        - SSLCertificateARN
    -
      Label:
        default: Redeploy/Existing Install Configuration
      Parameters:
        - ExistingBucketName
    -
      Label:
        default: Jenkins Configuration
      Parameters:
        - MasterInstanceType
        - JenkinsSubdomain
        - JenkinsVersion
        - AdminUsername
        - AdminPassword
        - JenkinsLogLevel
    -
      Label:
        default: Plugins Configuration
      Parameters:
        - GithubAdmins
        - GithubOrg
        - GithubEmail
        - GithubClientID
        - GithubClientSecret
        - SlackTeam
        - SlackRoom
        - SlackToken
    -
      Label:
        default: Jenkins Build Configuration
      Parameters:
        - BuildInstanceType
        - DockerVersion
    -
      Label:
        default: Network Configuration
      Parameters:
        - KeyName
        - VPC
        - SSHSecurityGroup
        - CIDRA
    -
      Label:
        default: Sumologic Configuration
      Parameters:
        - SumologicAccessID
        - SumologicAccessKey
    -
      Label:
        default: New Relic Configuration
      Parameters:
        - NewRelicAppName
        - NewRelicLicense
    -
      Label:
        default: Development Options
      Parameters:
        - GitClone
        - GitBranch

Conditions:
  # Creates bucket if no existing name entered
  JenkinsBucketCon:
    !Equals [ !Ref ExistingBucketName, '' ]

Mappings:
  RegionMap:
    us-west-2:
      HVM64: ami-b7a114d7
    eu-west-1:
      HVM64: ami-6f587e1c

Resources:
###############################################################################
# Subnets
###############################################################################
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      # Get Availability Zones and select first in string
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: !Ref CIDRA
      Tags:
        - Key: Name
          Value: Public-Subnet-A
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: "Public"

###############################################################################
# S3 Buckets
###############################################################################
  JenkinsBucket:
    Type: AWS::S3::Bucket
    # conditional look up, if true then creates this resource.
    Condition: JenkinsBucketCon
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private

###############################################################################
# EIP
###############################################################################
  MasterEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: VPC

###############################################################################
# Security: IAM, Groups, Instance Profiles
###############################################################################
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-JenkinsServer-Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Allow all actions to one bucket (the supplied one, or the one you provided)
          - Action: s3:*
            Effect: Allow
            Resource:
              - !Join ['', [ 'arn:aws:s3:::', !If [JenkinsBucketCon, !Ref JenkinsBucket, !Ref ExistingBucketName] ]]
              - !Join ['', [ 'arn:aws:s3:::', !If [JenkinsBucketCon, !Ref JenkinsBucket, !Ref ExistingBucketName], '/*' ]]
          # Allow ability to list all buckets
          - Action: s3:List*
            Effect: Allow
            Resource: arn:aws:s3:::*
          # Allow instances to read their own tags (needed for setup script below)
          - Action: ec2:DescribeTags
            Effect: Allow
            Resource: "*"
      Roles:
        - !Ref InstanceRole

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Jenkins ELB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${JenkinsSubdomain}-ELB-SecurityGroup

  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          SourceSecurityGroupId: !Ref BuildSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Server-Security-Group

  BuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: !Sub "${MasterEIP}/32"
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Server-Security-Group

###############################################################################
# Load Balancer (For SSL) and DNS
###############################################################################
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '90'
        Target: HTTP:80/login
        Timeout: '60'
        UnhealthyThreshold: '10'
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      LBCookieStickinessPolicy:
        - PolicyName: PublicELBCookieStickinessPolicy
          CookieExpirationPeriod: '3600'
      Listeners:
        - InstancePort: '80'
          LoadBalancerPort: '443'
          InstanceProtocol: HTTP
          Protocol: HTTPS
          PolicyNames:
            - PublicELBCookieStickinessPolicy
          SSLCertificateId: !Ref SSLCertificateARN
      Tags:
        - Key: Name
          Value: !Sub ${JenkinsSubdomain}-ELB

  JenkinsDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: !Sub Zone apex alias targeted to ${JenkinsSubdomain} ELB.
      RecordSets:
        - Name: !Join [ '', [ !Ref JenkinsSubdomain, ".", !Ref HostedZone, "." ] ]
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt ElasticLoadBalancer.CanonicalHostedZoneNameID
            DNSName: !GetAtt ElasticLoadBalancer.CanonicalHostedZoneName

###############################################################################
# Jenkins Master
###############################################################################
  MasterInstance:
    Type: AWS::EC2::Instance
    DependsOn:
      - BuildInstance
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", HVM64 ]
      InstanceType: !Ref MasterInstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref MasterSecurityGroup
            - !Ref SSHSecurityGroup
          SubnetId:
            Ref: SubnetA
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: '15'
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        "Fn::Base64":
          "Fn::Sub":
            - |
              #!/bin/bash -xev

              ##########################################################
              # Upgrade OS & Install Dependencies
              ##########################################################

              apt-get update && apt-get -y upgrade
              apt-get install -y wget curl python-setuptools python-pip git apt-transport-https

              ##########################################################
              # Global Variable Set
              ##########################################################

              export DEBIAN_FRONTEND=noninteractive
              export INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
              export STACKNAME='${AWS::StackName}'
              export HOSTNAME="${JenkinsSubdomain}.${HostedZone}"

              ##########################################################
              # Install cfn bootstraping tools
              ##########################################################

              if [ -z $(command -v cfn-signal) ]; then
                  easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
              fi

              ##########################################################
              # Helper function to set wait timer
              ##########################################################

              error_exit()
              {
                cfn-signal -e 1 -r "$1" "${MasterWaitHandle}"
                exit 1
              }

              export -f error_exit

              ##########################################################
              # Set Hostname and Hosts File
              ##########################################################

              hostname ${!HOSTNAME} || error_exit 'Failed to set hostname'
              echo "${!HOSTNAME}" > /etc/hostname || error_exit 'Failed to set hostname file'

              cat > '/etc/hosts' << EOF
              127.0.0.1 ${!HOSTNAME} ${!HOSTNAME%%.*} jenkins.${!HOSTNAME%%.*} localhost
              ::1 localhost6.localdomain6 localhost6
              EOF

              ##########################################################
              # Jenkins User Add
              ##########################################################

              useradd -d "/var/lib/jenkins" -m -s /bin/bash jenkins || error_exit "Failed to create Jenkins User"

              ##########################################################
              # Add Jenkins Repo & Install
              ##########################################################

              ## Dependencies
              apt-get install -y ca-certificates-java daemon dbus default-jre-headless \
              fontconfig-config fonts-dejavu-core java-common jenkins libavahi-client3 \
              libavahi-common-data libavahi-common3 libcap-ng0 libcups2 libdbus-1-3 libexpat1 \
              libfontconfig1 libfreetype6 libjpeg-turbo8 libjpeg8 liblcms2-2 libnspr4 libnss3 \
              libnss3-nssdb libpcsclite1 libpng12-0 libx11-6 libx11-data libxau6 libxcb1 libxdmcp6 libxext6 libxi6 \
              libxrender1 libxtst6 net-tools openjdk-8-jre-headless psmisc ucf x11-common

              ## User war download to control version
              mkdir -p /var/run/jenkins/ /var/lib/jenkins /usr/share/jenkins || error_exit "Failed to create Jenkins directories"
              wget "http://mirrors.jenkins.io/war-stable/${JenkinsVersion}/jenkins.war" -qO /usr/share/jenkins/jenkins.war || error_exit "Failed to download Jenkins war"
              chmod -R 755 /var/run/jenkins/ /var/lib/jenkins /usr/share/jenkins || error_exit "Failed to change Jenkins directory mode"
              chown -R jenkins:jenkins /var/run/jenkins/ /var/lib/jenkins /usr/share/jenkins || error_exit "Failed to change Jenkins directory owner"

              ##########################################################
              # Jenkins Log & Service Configuration
              ##########################################################

              ## Systemd Service File
              cat > '/lib/systemd/system/jenkins.service' << 'EOF'
              [Unit]
              Description=jenkins
              After=network.target
              Requires=network.target

              [Service]
              Type=simple
              User=jenkins
              Group=jenkins
              Environment=JENKINS_HOME=/var/lib/jenkins
              PIDFile=/var/run/jenkins/jenkins.pid
              ExecStartPre=/bin/rm -f /var/run/jenkins/jenkins.pid
              ExecStart=/usr/bin/java -Djava.awt.headless=true -jar /usr/share/jenkins/jenkins.war --httpPort=80 --httpListenAddress=127.0.0.1
              Restart=always
              RestartSec=20

              [Install]
              WantedBy=multi-user.target
              EOF

              systemctl enable jenkins || error_exit "Failed to enable Jenkins"

              ##########################################################
              # Clone Script Repo
              ##########################################################

              cd /root && git clone ${GitClone} || error_exit "Failed to Clone Scripts from Repo"

              if [ '${GitBranch}' != 'master' ]; then
                git checkout ${GitBranch} || error_exit "Failed to switch branches"
              fi

              ##########################################################
              # Jenkins Sync & Bootstrap
              ##########################################################

              if [ -n ${ExistingBucketName} ]; then
                aws s3 sync s3://${ExistingBucketName}/jenkins /var/lib/jenkins || error_exit "Failed to sync existing data"
              fi

              ## Swap Placeholders with Params
              sed -i 's/replaceAdminUser/${AdminUsername}/g' /root/cfn_jenkins/scripts/bootstrap/init.groovy
              sed -i 's/replaceAdminPassword/${AdminPassword}/g' /root/cfn_jenkins/scripts/bootstrap/init.groovy
              sed -i 's/replaceClientID/${GithubClientID}/g' /root/cfn_jenkins/scripts/bootstrap/bootsrap.groovy
              sed -i 's/replaceClientSecret/${GithubClientSecret}/g' /root/cfn_jenkins/scripts/bootstrap/bootsrap.groovy
              sed -i 's/replaceGithubOrg/${GithubOrg}/g' /root/cfn_jenkins/scripts/bootstrap/bootsrap.groovy
              sed -i 's/replaceGithubAdmins/${GithubAdmins}/g' /root/cfn_jenkins/scripts/bootstrap/bootsrap.groovy
              sed -i 's/replaceGitEmail/${GithubEmail}/g' /root/cfn_jenkins/scripts/bootstrap/bootsrap.groovy
              sed -i 's/replaceSlackTeam/${SlackTeam}/g' /root/cfn_jenkins/scripts/bootstrap/bootsrap.groovy
              sed -i 's/replaceSlackToken/${SlackToken}/g' /root/cfn_jenkins/scripts/bootstrap/bootsrap.groovy
              sed -i 's/replaceSlackRoom/${SlackRoom}/g' /root/cfn_jenkins/scripts/bootstrap/bootsrap.groovy
              sed -i 's/replaceDomain/${HostedZone}/g' /root/cfn_jenkins/scripts/bootstrap/bootsrap.groovy
              sed -i 's/replaceDockerIP/${DOCKERIP}/g' /root/cfn_jenkins/scripts/bootstrap/bootsrap.groovy

              mkdir -p /var/lib/jenkins/init.groovy.d || error_exit "Failed to Groovy Init Directory"
              cp -rf /root/cfn_jenkins/scripts/init /var/lib/jenkins/init.groovy.d || error_exit "Failed to copy groovy init scripts"

              systemctl start jenkins || error_exit "Failed to start Jenkins"

              curl --data-urlencode "script=$(</root/cfn_jenkins/scripts/bootstrap/init.groovy)" https://${JenkinsSubdomain}.${HostedZone} || error_exit "Failed to Run init Groovy Script"

              systemctl restart jenkins || error_exit "Failed to restart Jenkins"

              curl --data-urlencode "script=$(</root/cfn_jenkins/scripts/bootstrap/bootsrap.groovy)" https://${JenkinsSubdomain}.${HostedZone} || error_exit "Failed to run Groovy bootstrap Script"

              systemctl stop jenkins || error_exit "Failed to stop Jenkins"

              cat > '/var/lib/jenkins/jenkins.install.InstallUtil.lastExecVersion' << EOF
              ${JenkinsVersion}
              EOF

              cat > '/var/lib/jenkins/jenkins.install.UpgradeWizard.state' << EOF
              ${JenkinsVersion}
              EOF

              systemctl start jenkins || error_exit "Failed to start Jenkins"

              aws s3 sync /var/lib/jenkins/ s3://${BUCKET}/jenkins --exclude "*" --include "*.xml" --include "*.key" --include "secrets/*"

              mkdir -p /var/lib/jenkins/data || error_exit "Failed to create Jenkins data directory"

              cat > '/var/lib/jenkins/data/log.properties' << EOF
              handlers=java.util.logging.ConsoleHandler
              jenkins.level=${JenkinsLogLevel}
              java.util.logging.ConsoleHandler.level=${JenkinsLogLevel}
              EOF

              ##########################################################
              # NewRelic Config if Enabled
              ##########################################################

              if [ -n "${NewRelicLicense}" ]; then
                bash /root/cfn_jenkins/scripts/bootstrap/newrelic.sh ${NewRelicLicense} ${NewRelicAppName}
              fi

              ##########################################################
              # Sumologic Config if Enabled
              ##########################################################

              if [ -n "${SumologicAccessID}" ]; then
                bash /root/cfn_jenkins/scripts/bootstrap/sumologic.sh master ${SumologicAccessID} ${SumologicAccessKey}
              fi

              ##########################################################
              # Send Success Signal to CFN Wait Handle
              ##########################################################

              /usr/local/bin/cfn-signal -e 0 -r 'Server setup complete' "${MasterWaitHandle}"

              ##########################################################
              # Reboot After Success for all updates made
              ##########################################################

              apt-get update && apt-get -y upgrade
              reboot

            - { BUCKET: !If [ JenkinsBucketCon, !Ref JenkinsBucket, !Ref ExistingBucketName ], DOCKERIP: !GetAtt BuildInstance.PrivateIp }

      Tags:
        - Key: Name
          Value: !Sub Jenkins-Master-${AWS::StackName}
          PropagateAtLaunch: true

  MasterEIPAssign:
    Type: "AWS::EC2::EIPAssociation"
    Properties:
      EIP: !Ref MasterEIP
      InstanceId: !Ref MasterInstance

###############################################################################
# Jenkins Build/Docker Host
###############################################################################
  BuildInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", HVM64 ]
      InstanceType: !Ref BuildInstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref BuildSecurityGroup
            - !Ref SSHSecurityGroup
          SubnetId:
            Ref: SubnetA
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: '15'
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        "Fn::Base64":
          "Fn::Sub": |
            #!/bin/bash -xev

            ##########################################################
            # Upgrade OS & Install Dependencies
            ##########################################################

            apt-get update && apt-get -y upgrade
            apt-get install -y wget curl python-setuptools python-pip git

            ##########################################################
            # Global Variable Set
            ##########################################################

            export DEBIAN_FRONTEND=noninteractive
            export INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            export STACKNAME='${AWS::StackName}'
            export HOSTNAME="${JenkinsSubdomain}-build-${!INSTANCE_ID}.${HostedZone}"
            if [ "${DockerVersion}" >= '1.12.4' ]; then
              export DOCKERVERSION='${DockerVersion}-0~ubuntu-xenial'
            else
              export DOCKERVERSION='${DockerVersion}-0~xenial'
            fi

            ##########################################################
            # Install cfn bootstraping tools
            ##########################################################

            if [ -z $(command -v cfn-signal) ]; then
                easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            fi

            ##########################################################
            # Helper function to set wait timer
            ##########################################################

            error_exit()
            {
              cfn-signal -e 1 -r "$1" "${BuildWaitHandle}"
              exit 1
            }

            export -f error_exit

            ##########################################################
            # Set Hostname and Hosts File
            ##########################################################

            hostname ${!HOSTNAME} || error_exit 'Failed to set hostname'
            echo "${!HOSTNAME}" > /etc/hostname || error_exit 'Failed to set hostname file'

            cat > '/etc/hosts' << EOF
            127.0.0.1 ${!HOSTNAME} ${!HOSTNAME%%.*} localhost
            ::1 localhost6.localdomain6 localhost6
            EOF

            ##########################################################
            # Add Docker Repo & Install
            ##########################################################

            apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D || error_exit "Failed to add APT Repo Key"
            apt-add-repository 'deb https://apt.dockerproject.org/repo ubuntu-xenial main' || error_exit "Failed to add Repo List"

            apt-get update && apt-get install docker-engine=${!DOCKERVERSION} || error_exit "Failed to Install Docker Engine"

            ##########################################################
            # Docker Setup
            ##########################################################

            cat > '/etc/default/docker' << 'EOF'
            DOCKER="/usr/bin/docker"

            DOCKER_OPTS="-H tcp://127.0.0.1:79800 -H unix:///var/run/docker.sock --pidfile=/var/run/docker.pid --tlsverify=false"
            EOF

            ##########################################################
            # NewRelic Config if Enabled
            ##########################################################

            if [ -n "${NewRelicLicense}" ]; then
              wget -qO /root/newrelic.sh 'https://github.com/HearstAT/cfn_jenkins/raw/${GitBranch}/newrelic.sh' && bash /root/newrelic.sh ${NewRelicLicense} ${NewRelicAppName}
            fi

            ##########################################################
            # Sumologic Config if Enabled
            ##########################################################

            if [ -n "${SumologicAccessID}" ]; then
              wget -qO /root/sumologic.sh 'https://github.com/HearstAT/cfn_jenkins/raw/${GitBranch}/sumologic.sh' && bash /root/sumologic.sh proxy ${SumologicAccessID} ${SumologicAccessKey}
            fi

            ##########################################################
            # Send Success Signal to CFN Wait Handle
            ##########################################################

            /usr/local/bin/cfn-signal -e 0 -r 'Server setup complete' "${BuildWaitHandle}"

            ##########################################################
            # Reboot After Success for all updates made
            ##########################################################

            apt-get update && apt-get -y upgrade
            reboot

      Tags:
        - Key: Name
          Value: !Sub Jenkins-Build-Server-${AWS::StackName}
          PropagateAtLaunch: true

  MasterWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  MasterWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: MasterInstance
    Properties:
      Handle:  !Ref MasterWaitHandle
      Timeout: '900'

  BuildWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  BuildWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: BuildInstance
    Properties:
      Handle:  !Ref BuildWaitHandle
      Timeout: '900'
