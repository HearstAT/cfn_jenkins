---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Xenial (20161214 AMI Build) - Jenkins Master and Docker Build Server"

Parameters:
###############################################################################
# Domain Configuration
###############################################################################
  HostedZone:
    Type: String
    Default: domain.com
    Description: must match a route53 hosted domain/zone

  SSLCertificateARN:
    Type: String
    Default: ''
    Description: SSL Certficate ARN for SSL Certficate

###############################################################################
# Redeploy/Existing Install Configuration
###############################################################################
  ExistingBucketName:
    Type: String
    Default: ''
    Description: Enter a Existing Bucket Name to to use (Leave blank to create new)

###############################################################################
# Jenkins Configuration
###############################################################################
  JenkinsSubdomain:
    Type: String
    Default: jenkins-test
    AllowedValues:
      - jenkins-a
      - jenkins-b
      - jenkins-test
    Description: subdomain/prefix that is combined with the hosted zone entered

  JenkinsVersion:
    Type: String
    Default: "2.19.4"
    AllowedValues:
      - "2.19.4"
      - "2.19.3"
      - "2.19.2"
      - "2.19.1"
      - "2.7.4"
      - "2.7.3"
      - "2.7.2"
      - "2.7.1"
    Description: Choose Jenkins Version to Install

  AdminPassword:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: Enter Password for Jenkins Admin (replaces the initial password set)

  JenkinsLogLevel:
    Type: String
    Default: "INFO"
    AllowedValues:
      - "SEVERE"
      - "WARNING"
      - "INFO"
      - "CONFIG"
      - "FINE"
      - "FINER"
      - "FINEST"
      - "ALL"
    Description: Choose log level for Jenkins Master

###############################################################################
# Jenkins Build Configuration
###############################################################################
  DockerVersion:
    Type: String
    Default: "1.12.5"
    AllowedValues:
      - "1.12.5"
      - "1.12.4"
      - "1.12.3"
      - "1.12.2"
      - "1.12.1"
      - "1.12.0"
      - "1.11.2"
      - "1.11.1"
      - "1.11.0"
    Description: Choose Docker Version to Install

###############################################################################
# Instance and Network Configuration
###############################################################################
  VPC:
    Description: Choose VPC to use
    Type: AWS::EC2::VPC::Id
    Default: ''

  MasterInstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large

    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  SSHSecurityGroup:
    Description: Select Security Group for SSH Access
    Type: AWS::EC2::SecurityGroup::Id
    Default: ''

  CIDRA:
    Type: String
    Default: 172.33.40.0/24
    Description: Subnet A CIDR Block

###############################################################################
# Sumologic Configuration
###############################################################################
  SumologicAccessID:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: (Optional) Enter Sumologic Access ID

  SumologicAccessKey:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: (Optional) Enter Sumologic Access Key

###############################################################################
# New Relic Configuration
###############################################################################
  NewRelicAppName:
    Type: String
    Default: ''
    Description: (Optional) Enter New Relic Application Name; e.g.; jenkins_stack

  NewRelicLicense:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: (Optional) Enter New Relic License Key

###############################################################################
# Development Configuration
###############################################################################
  GitBranch:
    Description: Enter Branch to Pull Scripts From (For Testing Only Leave Default for Prod)
    Type: String
    Default: 'master'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: Domain Configuration
      Parameters:
        - HostedZone
        - SSLCertificateARN
    -
      Label:
        default: Redeploy/Existing Install Configuration
      Parameters:
        - ExistingBucketName
    -
      Label:
        default: Jenkins Configuration
      Parameters:
        - MasterInstanceType
        - JenkinsSubdomain
        - JenkinsVersion
        - AdminPassword
        - JenkinsLogLevel
    -
      Label:
        default: Jenkins Build Configuration
      Parameters:
        - BuildInstanceType
        - DockerVersion
    -
      Label:
        default: Network Configuration
      Parameters:
        - KeyName
        - VPC
        - SSHSecurityGroup
        - CIDRA
    -
      Label:
        default: Sumologic Configuration
      Parameters:
        - SumologicAccessID
        - SumologicAccessKey
    -
      Label:
        default: New Relic Configuration
      Parameters:
        - NewRelicAppName
        - NewRelicLicense
    -
      Label:
        default: Development Options
      Parameters:
        - GitBranch

Mappings:
  RegionMap:
    us-west-2:
      HVM64: ami-b7a114d7
    eu-west-1:
      HVM64: ami-6f587e1c

Resources:

###############################################################################
# Subnets
###############################################################################
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      # Get Availability Zones and select first in string
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: !Ref CIDRA
      Tags:
        - Key: Name
          Value: Public-Subnet-A
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: "Public"

###############################################################################
# S3 Buckets
###############################################################################
  JenkinsBucket:
    Type: AWS::S3::Bucket
    # conditional look up, if true then creates this resource.
    Condition: JenkinsBucketCon
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private

###############################################################################
# Security: IAM, Groups, Instance Profiles
###############################################################################
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-JenkinsServer-Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Allow all actions to one bucket (the supplied one, or the one you provided)
          - Action: s3:*
            Effect: Allow
            Resource:
              - !Join ['', [ 'arn:aws:s3:::', !If [JenkinsBucketCon, !Ref JenkinsBucket, !Ref ExistingBucketName] ]]
              - !Join ['', [ 'arn:aws:s3:::', !If [JenkinsBucketCon, !Ref JenkinsBucket, !Ref ExistingBucketName], '/*' ]]
          # Allow ability to list all buckets
          - Action: s3:List*
            Effect: Allow
            Resource: arn:aws:s3:::*
          # Allow instances to read their own tags (needed for setup script below)
          - Action: ec2:DescribeTags
            Effect: Allow
            Resource: "*"
      Roles:
        - !Ref InstanceRole

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Jenkins ELB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${JenkinsSubdomain}-ELB-SecurityGroup

  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          SourceSecurityGroupId: !Ref BuildSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Server-Security-Group

  BuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: !Sub ${}/32
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Server-Security-Group

###############################################################################
# Jenkins Master
###############################################################################
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", HVM64 ]
      InstanceType: !Ref MasterInstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref ServerSecurityGroup
            - !Ref SSHSecurityGroup
          SubnetId:
            Ref: SubnetA
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: '15'
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        "Fn::Base64":
          "Fn::Sub": |
            #!/bin/bash -xev

            ##########################################################
            # Upgrade OS & Install Dependencies
            ##########################################################

            apt-get update && apt-get -y upgrade
            apt-get install -y wget curl python-setuptools python-pip git

            ##########################################################
            # Global Variable Set
            ##########################################################

            export DEBIAN_FRONTEND=noninteractive
            export INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            export STACKNAME='${AWS::StackName}'

            ##########################################################
            # Install cfn bootstraping tools
            ##########################################################

            if [ -z $(command -v cfn-signal) ]; then
                easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            fi

            ##########################################################
            # Helper function to set wait timer
            ##########################################################

            error_exit()
            {
              cfn-signal -e 1 -r "$1" "${WaitHandle}"
              exit 1
            }

            export -f error_exit

            ##########################################################
            # Add Jenkins Repo & Install
            ##########################################################

            wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | apt-key add -
            cat > '/etc/apt/sources.list.d/jenkins.list' << EOF
            deb https://pkg.jenkins.io/debian-stable binary/
            EOF

            apt-get update && apt-get install jenkins=${JenkinsVersion}

            ##########################################################
            # Jenkins Plugins
            ##########################################################

            cat > '/root/plugins.txt' << EOF
            greenballs
            token-macro
            run-condition
            envinject
            conditional-buildstep
            durable-task
            jquery
            aws-java-sdk
            copyartifact
            compress-artifacts
            copy-to-slave
            ssh
            slave-status
            ansicolor
            antisamy-markup-formatter
            credentials
            git
            git-changelog
            git-client
            gravatar
            jenkins-multijob-plugin
            matrix-auth
            matrix-project
            matrix-reloaded
            pam-auth
            parameterized-trigger
            plain-credentials
            ruby-runtime
            run-condition
            scm-api
            ssh-credentials
            ssh-slaves
            s3
            disk-usage
            embeddable-build-status
            docker-plugin
            github
            github-oauth
            ghprb
            EOF

            ##########################################################
            # Jenkins Setup
            ##########################################################

            service jenkins start

            until $(curl -s -m 60 -o /dev/null -I -f -u "admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)" http://localhost:8080/cli/);
            do printf "."; sleep 1; done

            sed -i -e "s@<slaveAgentPort>.*</slaveAgentPort>@<slaveAgentPort>49817</slaveAgentPort>@" /var/lib/jenkins/config.xml

            service jenkins restart

            until $(curl -s -m 60 -o /dev/null -I -f -u "admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)" http://localhost:8080/cli/);
            do printf "."; sleep 1; done

            while read -r plugin;
            do java -jar /var/cache/jenkins/war/WEB-INF/jenkins-cli.jar -s "http://localhost:8080/" -noKeyAuth install-plugin "${!plugin}" --username admin --password "$(cat /var/lib/jenkins/secrets/initialAdminPassword)"; done < /root/plugins.txt

            service jenkins restart

            until $(curl -s -m 60 -o /dev/null -I -f -u "admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)" http://localhost:8080/cli/);
            do printf "."; sleep 1; done

            echo 'jenkins.model.Jenkins.instance.securityRealm.createAccount("admin", "${AdminPassword}")' | java -jar /var/cache/jenkins/war/WEB-INF/jenkins-cli.jar -s "http://localhost:8080/" -noKeyAuth groovy = --username admin --password "$(cat /var/lib/jenkins/secrets/initialAdminPassword)"

            service jenkins stop

            cat > '/var/lib/jenkins/setup_done.txt' << EOF
            I be bootstrapped!
            EOF

            cat > data/log.properties <<EOF
            handlers=java.util.logging.ConsoleHandler
            jenkins.level=${JenkinsLogLevel}
            java.util.logging.ConsoleHandler.level=${JenkinsLogLevel}
            EOF

            ##########################################################
            # Send Success Signal to CFN Wait Handle
            ##########################################################

            /usr/local/bin/cfn-signal -e 0 -r 'Server setup complete' "${WaitHandle}"

            ##########################################################
            # Reboot After Success for all updates made
            ##########################################################

            reboot

###############################################################################
# Jenkins Build/Docker Host
###############################################################################

  BuildInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", HVM64 ]
      InstanceType: !Ref MasterInstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref ServerSecurityGroup
            - !Ref SSHSecurityGroup
          SubnetId:
            Ref: SubnetA
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: '15'
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        "Fn::Base64":
          "Fn::Sub": |
            #!/bin/bash -xev

            ##########################################################
            # Upgrade OS & Install Dependencies
            ##########################################################

            apt-get update && apt-get -y upgrade
            apt-get install -y wget curl python-setuptools python-pip git

            ##########################################################
            # Global Variable Set
            ##########################################################

            export DEBIAN_FRONTEND=noninteractive
            export INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            export STACKNAME='${AWS::StackName}'

            ##########################################################
            # Install cfn bootstraping tools
            ##########################################################

            if [ -z $(command -v cfn-signal) ]; then
                easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            fi

            ##########################################################
            # Helper function to set wait timer
            ##########################################################

            error_exit()
            {
              cfn-signal -e 1 -r "$1" "${WaitHandle}"
              exit 1
            }

            export -f error_exit

            ##########################################################
            # Add Docker Repo & Install
            ##########################################################

            apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
            apt-add-repository 'deb https://apt.dockerproject.org/repo ubuntu-xenial main'

            apt-get update && apt-get install docker-engine=${DockerVersion}

            ##########################################################
            # Docker Setup
            ##########################################################


            ##########################################################
            # Send Success Signal to CFN Wait Handle
            ##########################################################

            /usr/local/bin/cfn-signal -e 0 -r 'Server setup complete' "${WaitHandle}"

            ##########################################################
            # Reboot After Success for all updates made
            ##########################################################

            reboot

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: Ec2Instance
    Properties:
      Handle:  !Ref WaitHandle
      Timeout: '2300'
